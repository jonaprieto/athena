language: c
dist: trusty
sudo: required

matrix:

  include:

    - env: TEST=MAIN GHC_VER=8.2.1 BUILD=CABAL CABAL_VER=2.0
      addons:
        apt:
          packages:
            - alex-3.1.7
            - cabal-install-2.0
            - ghc-8.2.1
            - happy-1.19.5
            - texlive-binaries
          sources:
            - hvr-ghc

    - env: TEST=main GHC_VER=8.0.2 CABAL_VER=1.24
      addons:
        apt:
          packages:
            - alex-3.1.7
            - cabal-install-1.24
            - ghc-8.0.2
            - happy-1.19.5
            - texlive-binaries
          sources:
            - hvr-ghc

before_install:
 - unset CC
 - export MY_HOME=${HOME}/build/jonaprieto
 - mkdir -p ${HOME}/bin
 - export PATH=/home/travis/.cabal/bin:${MY_HOME}/bin:/opt/ghc/${GHC_VER}/bin:/opt/cabal/${CABAL_VER}/bin:/opt/alex/3.1.7/bin:/opt/happy/1.19.5/bin:${PATH}

install:
 - ghc --version
 - cabal --version
 - cabal update
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - if [ -f $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz ];
   then
     zcat $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz >
          $HOME/.cabal/packages/hackage.haskell.org/00-index.tar;
   fi
 - travis_retry cabal update -v
 - sed -i 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config
 - cabal install --force-reinstalls --only-dependencies --enable-tests --enable-benchmarks --dry -v > installplan.txt
 - sed -i -e '1,/^Resolving /d' installplan.txt; cat installplan.txt

# check whether current requested install-plan matches cached package-db snapshot
 - if diff -u installplan.txt $HOME/.cabsnap/installplan.txt;
   then
     echo "cabal build-cache HIT";
     rm -rfv .ghc;
     cp -a $HOME/.cabsnap/ghc $HOME/.ghc;
     cp -a $HOME/.cabsnap/lib $HOME/.cabsnap/share $HOME/.cabsnap/bin $HOME/.cabal/;
   else
     echo "cabal build-cache MISS";
     rm -rf $HOME/.cabsnap;
     mkdir -p $HOME/.ghc $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin;
     cabal install --only-dependencies --enable-tests --enable-benchmarks;
   fi

# snapshot package-db on cache miss
 - if [ ! -d $HOME/.cabsnap ];
   then
      echo "snapshotting package-db to build-cache";
      mkdir -p $HOME/.cabsnap;
      cp -a $HOME/.ghc $HOME/.cabsnap/ghc;
      cp -a $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin installplan.txt $HOME/.cabsnap/;
   fi

 - cabal install cabal-install
 - cabal install cpphs-1.20.8
 # - make install-fix-whitespace
 - cabal install hlint
 - hlint --version
 - cabal install agda-2.5.3
 - agda --version

 # Online-atps.
 - cd /home/travis
 - git clone https://github.com/jonaprieto/online-atps.git
 - cd online-atps
 - cabal install --force-reinstalls
 - cd /home/travis/build/jonaprieto/athena

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi
 - cabal configure --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
 - cabal build   # this builds all libraries and executables (including tests/benchmarks)
 #- cabal test
 #- cabal check
 - cabal sdist -v   # tests that a source-distribution can be generated

 # Check that the resulting source distribution can be built & installed.
 # If there are no other `.tar.gz` files in `dist`, this can be even simpler:
 # `cabal install --force-reinstalls dist/*-*.tar.gz`
 - SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz &&
   (cd dist && cabal install --force-reinstalls "$SRC_TGZ")
# - make hlint
# - make checklines
# testing the reconstruction
 - make reconstruct
 # - make check
