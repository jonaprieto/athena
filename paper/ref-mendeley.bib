@article{Abel2002,
abstract = {We introduce a language based upon lambda calculus with products, coproducts and strictly positive inductive types that allows the definition of recursive terms.  We present the implementation (foetus) of a syntactical check that ensures that all such terms are structurally recursive, i.e. recursive calls appear only with arguments structurally smaller than the input parameters of terms considered.  To ensure the correctness of the termination checker, we show that all structurally recursive terms are normalizing with respect to a given operational semantics.  To this end, we define a semantics on all types and a structural ordering on the values in this semantics and prove that all values are accessible with regard to this ordering.  Finally, we point out how to do this proof predicatively using set based operators.},
author = {Abel, Andreas and Altenkirch, Thorsten},
doi = {10.1017/S0956796801004191},
file = {:Users/jonaprieto/Mendeley/Abel, Altenkirch - 2002 - A Predicative Analysis of Structural Recursion.pdf:pdf},
issn = {0956-7968},
journal = {Journal of Functional Programming},
number = {01},
pages = {1--41},
title = {{A Predicative Analysis of Structural Recursion}},
url = {http://www.journals.cambridge.org/abstract{\_}S0956796801004191},
volume = {12},
year = {2002}
}
@article{Agudelo-Agudelo2017,
author = {Agudelo-Agudelo, Juan C.},
doi = {10.1007/s11787-017-0168-1},
file = {:Users/jonaprieto/Mendeley/Agudelo-Agudelo - 2017 - Translating Non-classical Logics into Classical Logic by Using Hidden Variables.pdf:pdf},
issn = {1661-8297},
journal = {Logica Universalis},
number = {2},
pages = {205--224},
title = {{Translating Non-classical Logics into Classical Logic by Using Hidden Variables}},
url = {http://link.springer.com/10.1007/s11787-017-0168-1},
volume = {11},
year = {2017}
}
@article{appel1959,
author = {Appel, K. I.},
issn = {00224812},
journal = {The Journal of Symbolic Logic},
number = {4},
pages = {306--310},
publisher = {Association for Symbolic Logic},
title = {{Horn Sentences in Identity Theory}},
url = {http://www.jstor.org/stable/2963901},
volume = {24},
year = {1959}
}
@incollection{armand2011,
abstract = {We present a way to enjoy the power of SAT and SMT provers in Coq without compromising soundness. This requires these provers to return not only a yes/no answer, but also a proof witness that can be independently rechecked. We present such a checker, written and fully certified in Coq. It is conceived in a modular way, in order to tame the proofs' complexity and to be extendable. It can currently check witnesses from the SAT solver ZChaff and from the SMT solver veriT. Experiments highlight the efficiency of this checker. On top of it, new reflexive Coq tactics have been built that can decide a subset of Coq's logic by calling external provers and carefully checking their answers.},
address = {Berlin, Heidelberg},
author = {Armand, Michael and Faure, Germain and Gr{\'{e}}goire, Benjamin and Keller, Chantal and Th{\'{e}}ry, Laurent and Werner, Benjamin},
booktitle = {Certified Programs and Proofs: First International Conference, CPP 2011, Kenting, Taiwan, December 7-9, 2011. Proceedings},
doi = {10.1007/978-3-642-25379-9_12},
isbn = {978-3-642-25379-9},
pages = {135--150},
publisher = {Springer Berlin Heidelberg},
title = {{A Modular Integration of SAT/SMT Solvers to Coq through Proof Witnesses}},
url = {https://doi.org/10.1007/978-3-642-25379-9{\_}12},
year = {2011}
}
@inproceedings{Armand2010,
abstract = {Coq has within its logic a programming language that can be used to replace many deduction steps into a single computation, this is the so-called reflection. In this paper, we present two extensions of the evaluation mechanism that preserve its correctness and make it possible to deal with cpu-intensive tasks such as proof checking of SAT traces.},
author = {Armand, Michael and Gr{\'{e}}goire, Benjamin and Spiwack, Arnaud and Th{\'{e}}ry, Laurent},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-14052-5_8},
isbn = {3642140513},
issn = {03029743},
pages = {83--98},
title = {{Extending Coq with imperative features and its application to SAT verification}},
volume = {6172 LNCS},
year = {2010}
}
@incollection{Barrett2011,
abstract = {CVC4 is the latest version of the Cooperating Validity Checker. A joint project of NYU and U Iowa, CVC4 aims to support the useful feature set of CVC3 and SMT-LIBv2 while optimizing the design of the core system architecture and decision procedures to take advantage of recent engineering and algorithmic advances. CVC4 represents a completely new code base; it is a from-scratch rewrite of CVC3, and many subsystems have been completely redesigned. Additional decision procedures for CVC4 are currently under development, but for what it currently achieves, it is a lighter-weight and higher-performing tool than CVC3. We describe the system architecture, subsystems of note, and discuss some applications and continuing work.},
address = {Berlin, Heidelberg},
author = {Barrett, Clark and Conway, Christopher L. and Deters, Morgan and Hadarean, Liana and Jovanovi{\'{c}}, Dejan and King, Tim and Reynolds, Andrew and Tinelli, Cesare},
booktitle = {Computer Aided Verification: 23rd International Conference, CAV 2011, Snowbird, UT, USA, July 14-20, 2011. Proceedings},
doi = {10.1007/978-3-642-22110-1_14},
editor = {Gopalakrishnan, Ganesh and Qadeer, Shaz},
isbn = {978-3-642-22110-1},
pages = {171--177},
publisher = {Springer Berlin Heidelberg},
title = {{CVC4}},
year = {2011}
}
@inproceedings{Benzmuller2008,
abstract = {LEO-II is a standalone, resolution-based higher-order theorem prover designed for effective cooperation with specialist provers for natural fragments of higher-order logic. At present LEO-II can cooperate with the first-order automated theorem provers E, SPASS, and Vampire. The improved performance of LEO-II, especially in comparison to its predecessor LEO, is due to several novel features including the exploitation of term sharing and term indexing techniques, support for primitive equality reasoning, and improved heuristics at the calculus level. LEO-II is implemented in Objective Caml and its problem representation language is the new TPTP THF language.},
author = {Benzm{\"{u}}ller, Christoph and Paulson, Lawrence C. and Theiss, Frank and Fietzke, Arnaud},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-540-71070-7_14},
isbn = {3540710698},
issn = {03029743},
pages = {162--170},
title = {{LEO-II - A cooperative automatic theorem prover for classical higher-order logic (system description)}},
volume = {5195 LNAI},
year = {2008}
}
@book{Bertot2004,
abstract = {Coq is an interactive proof assistant for the development of mathematical theories and formally certified software. It is based on a theory called the calculus of inductive constructions, a variant of type theory. This book provides a pragmatic introduction to the development of proofs and certified programs using Coq. With its large collection of examples and exercises it is an invaluable tool for researchers, students, and engineers interested in formal methods and the development of zero-fault software.},
author = {Bertot, Yves and Cast{\'{e}}ran, Pierre},
booktitle = {Springer},
doi = {10.1007/978-3-662-07964-5},
file = {:Users/jonaprieto/Mendeley/Bertot, Cast{\'{e}}ran - 2004 - Interactive Theorem Proving and Program Development Coq'Art The Calculus of Inductive Constructions.pdf:pdf},
isbn = {3540208542},
title = {{Interactive Theorem Proving and Program Development: Coq'Art: The Calculus of Inductive Constructions}},
url = {http://books.google.nl/books/about/Interactive{\_}Theorem{\_}Proving{\_}and{\_}Program.html?id=m5w5PRj5Nj4C{\&}pgis=1},
year = {2004}
}
@article{Bezem2002,
author = {Bezem, Marc and Hendriks, Dimitri and {De Nivelle}, Hans},
doi = {10.1023/A:1021939521172},
file = {:Users/jonaprieto/Mendeley/Bezem, Hendriks, De Nivelle - 2002 - Automated proof construction in type theory using resolution.pdf:pdf},
isbn = {3540676643},
issn = {01687433},
journal = {Journal of Automated Reasoning},
keywords = {Proof construction,Resolution theorem proving,Type theory},
number = {3-4},
pages = {253--275},
title = {{Automated proof construction in type theory using resolution}},
volume = {29},
year = {2002}
}
@article{Blanchette2016,
author = {Blanchette, Jasmin and B{\"{o}}hme, Sascha and Fleury, Mathias and Smolka, Steffen Juilf and Steckermeier, Albert},
doi = {10.1007/s10817-015-9335-3},
file = {:Users/jonaprieto/Mendeley/Blanchette et al. - 2016 - Semi-intelligible Isar Proofs from Machine-Generated Proofs.pdf:pdf},
issn = {15730670},
journal = {Journal of Automated Reasoning},
keywords = {Automatic theorem provers,Natural deduction,Proof assistants},
number = {2},
pages = {155--200},
publisher = {Journal of Automated Reasoning},
title = {{Semi-intelligible Isar Proofs from Machine-Generated Proofs}},
url = {http://dx.doi.org/10.1007/s10817-015-9335-3},
volume = {56},
year = {2016}
}
@article{blanchette2013extending,
abstract = {Sledgehammer is a component of Isabelle/HOL that employs resolution-based first-order automatic theorem provers (ATPs) to discharge goals arising in interactive proofs. It heuristically selects relevant facts and, if an ATP is successful, produces a snippet that replays the proof in Isabelle. We extended Sledgehammer to invoke satisfiability modulo theories (SMT) solvers as well, exploiting its relevance filter and parallel architecture. The ATPs and SMT solvers nicely complement each other, and Isabelle users are now pleasantly surprised by SMT proofs for problems beyond the ATPs' reach.},
author = {Blanchette, Jasmin and B{\"{o}}hme, Sascha and Paulson, Lawrence C.},
doi = {10.1007/s10817-013-9278-5},
file = {:Users/jonaprieto/Mendeley/Blanchette, B{\"{o}}hme, Paulson - 2013 - Extending Sledgehammer with SMT Solvers(2).pdf:pdf},
issn = {1573-0670},
journal = {Journal of Automated Reasoning},
month = {jun},
number = {1},
pages = {109--128},
title = {{Extending Sledgehammer with SMT Solvers}},
url = {https://doi.org/10.1007/s10817-013-9278-5},
volume = {51},
year = {2013}
}
@inproceedings{Bohme2011,
abstract = {Automatic provers that can produce proof certificates do not need to be trusted. The certificate can be checked by an independent tool, for example an LCF-style proof assistant such as IsabelleHOL or HOL. Currently, the design of proof formats is mostly dictated by internal constraints of automatic provers and less guided by applications such as checking of certificates. In the worst case, checking can be as involved as the actual proof search simply because important information is missing in the proof certificate. To address this and other issues, we describe design choices for proof formats that we consider both feasible for implementors of automatic provers as well as effective to simplify checking of certificates.},
author = {B{\"{o}}hme, Sascha and Weber, Tjark},
booktitle = {First International Workshop on Proof eXchange for Theorem Proving - PxTP 2011},
file = {:Users/jonaprieto/Mendeley/B{\"{o}}hme, Weber - 2011 - Designing Proof Formats A User's Perspective - Experience Report.pdf:pdf;:Users/jonaprieto/Mendeley/B{\"{o}}hme, Weber - 2011 - Designing Proof Formats A User's Perspective - Experience Report(2).pdf:pdf},
title = {{Designing Proof Formats: A User's Perspective - Experience Report}},
url = {http://hal.inria.fr/hal-00677244},
year = {2011}
}
@incollection{bohme2010,
abstract = {The Satisfiability Modulo Theories (SMT) solver Z3 can generate proofs of unsatisfiability. We present independent reconstruction of these proofs in the theorem provers Isabelle/HOL and HOL4 with particular focus on efficiency. Our highly optimized implementations outperform previous LCF-style proof checkers for SMT, often by orders of magnitude. Detailed performance data shows that LCF-style proof reconstruction can be faster than proof search in Z3.},
address = {Berlin, Heidelberg},
author = {B{\"{o}}hme, Sascha and Weber, Tjark},
booktitle = {Interactive Theorem Proving: First International Conference, ITP 2010, Edinburgh, UK, July 11-14, 2010. Proceedings},
doi = {10.1007/978-3-642-14052-5_14},
editor = {Kaufmann, Matt and Paulson, Lawrence C.},
file = {:Users/jonaprieto/Mendeley/B{\"{o}}hme, Weber - 2010 - Fast LCF-Style Proof Reconstruction for Z3.pdf:pdf;:Users/jonaprieto/Mendeley/B{\"{o}}hme, Weber - 2010 - Fast LCF-Style Proof Reconstruction for Z3(2).pdf:pdf},
isbn = {978-3-642-14052-5},
pages = {179--194},
publisher = {Springer Berlin Heidelberg},
title = {{Fast LCF-Style Proof Reconstruction for Z3}},
year = {2010}
}
@incollection{bouton2009,
abstract = {This article describes the first public version of the satisfiability modulo theory (SMT) solver veriT. It is open-source, proof-producing, and complete for quantifier-free formulas with uninterpreted functions and difference logic on real numbers and integers.},
address = {Berlin, Heidelberg},
author = {Bouton, Thomas and de Oliveira, Diego and D{\'{e}}harbe, David and Fontaine, Pascal},
booktitle = {Automated Deduction -- CADE-22: 22nd International Conference on Automated Deduction, Montreal, Canada, August 2-7, 2009. Proceedings},
doi = {10.1007/978-3-642-02959-2_12},
isbn = {978-3-642-02959-2},
pages = {151--156},
publisher = {Springer Berlin Heidelberg},
title = {{veriT: An Open, Trustable and Efficient SMT-Solver}},
year = {2009}
}
@article{Bove2002,
abstract = {General recursive algorithms are such that the recursive calls are performed on arguments satisfying no condition that guarantees termination. Hence, there is no direct way of formalising them in type theory. The standard way of handling general recursion in type theory uses a well-founded recursion principle. Unfortunately, this way of formalising general recursive algorithms often produces unnecessarily long and complicated codes. On the other hand, functional programming languages like Haskell impose no restrictions on recursive programs, and then writing general recursive algorithms is straightforward. In addition, functional programs are usually short and self-explanatory. However, the existing frameworks for reasoning about the correctness of Haskell-like programs are weaker than the framework provided by type theory. The goal of this work is to present a method that combines the advantages of both programming styles when writing simple general recursive algorithms....},
author = {Bove, Ana},
doi = {10.1017/S0960129505004822},
file = {:Users/jonaprieto/Mendeley/Bove - 2002 - General recursion in type theory.pdf:pdf},
issn = {0346718X},
journal = {Doktorsavhandlingar vid Chalmers Tekniska Hogskola},
number = {1889},
pages = {39--58},
title = {{General recursion in type theory}},
year = {2002}
}
@incollection{Bove2005,
author = {Bove, Ana and Capretta, Venanzio},
doi = {10.1007/11417170_10},
file = {:Users/jonaprieto/Mendeley/Bove, Capretta - 2005 - Recursive Functions with Higher Order Domains.pdf:pdf},
pages = {116--130},
publisher = {Springer, Berlin, Heidelberg},
title = {{Recursive Functions with Higher Order Domains}},
url = {http://link.springer.com/10.1007/11417170{\_}10},
year = {2005}
}
@inproceedings{Bove2012,
abstract = {We propose a new approach to the computer-assisted verification of functional programs. We work in first order theories of functional programs which are obtained by extending Aczel's first order theory of combinatory formal arithmetic with positive inductive and coinductive predicates. Rather than building a special purpose system we implement our theories in Agda, a proof assistant for dependent type theory which can be used as a generic theorem prover. Agda provides support for interactive reasoning by encoding first order theories using the formulae-as-types principle. Further support is provided by off-the-shelf automatic theorem provers for first order logic which can be called by a program which translates Agda representations of first order formulae into the TPTP language understood by the provers. We show some examples where we combine interactive and automatic reasoning, covering both proof by induction and coinduction.},
author = {Bove, Ana and Dybjer, Peter and Sicard-Ram{\'{i}}rez, Andr{\'{e}}s},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-28729-9_7},
file = {:Users/jonaprieto/Mendeley/Bove, Dybjer, Sicard-Ram{\'{i}}rez - 2012 - Combining Interactive and Automatic Reasoning in First Order Theories of Functional Programs.pdf:pdf},
isbn = {9783642287282},
issn = {03029743},
pages = {104--118},
publisher = {Springer},
title = {{Combining Interactive and Automatic Reasoning in First Order Theories of Functional Programs}},
url = {http://link.springer.com/chapter/10.1007/978-3-642-28729-9{\_}7},
volume = {7213 LNCS},
year = {2012}
}
@inproceedings{Brown2012,
abstract = {Satallax is an automatic higher-order theorem prover that generates propositional clauses encoding (ground) tableau rules and uses MiniSat to test for unsatisfiability. We describe the implementation, focusing on flags that control search and examples that illustrate how the search proceeds.},
author = {Brown, Chad E.},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-31365-3_11},
isbn = {9783642313646},
issn = {03029743},
keywords = {higher-order logic,higher-order theorem proving,simple type theory},
pages = {111--117},
title = {{Satallax: An automatic higher-order prover}},
volume = {7364 LNAI},
year = {2012}
}
@inproceedings{Burel,
abstract = {The $\lambda$$\Pi$-calculus modulo is a proof language that has been proposed as a proof standard for (re-)checking and interoperability. Resolution and superposition are proof-search methods that are used in state-of-the-art first-order automated theorem provers. We provide a shallow embedding of resolution and superposition proofs in the $\lambda$$\Pi$-calculus modulo, thus offering a way to check these proofs in a trusted setting, and to combine them with other proofs. We implement this embedding as a backend of the prover iProver Modulo.},
author = {Burel, Guillaume},
booktitle = {Third International Workshop on Proof Exchange for Theorem Proving,},
file = {:Users/jonaprieto/Mendeley/Burel - 2013 - A Shallow Embedding of Resolution and Superposition Proofs into the $\lambda$ $\Pi$ -Calculus.pdf:pdf},
keywords = {Interoperability,automatic theorem provers,proof checking,rewriting},
mendeley-tags = {Interoperability,automatic theorem provers,proof checking,rewriting},
pages = {1--15},
title = {{A Shallow Embedding of Resolution and Superposition Proofs into the $\lambda$ $\Pi$ -Calculus}},
year = {2013}
}
@article{Altenkirch2015,
abstract = {A computer formalisation of the completeness of the boolean model of classical propositional logic is presented. The work follows Huth and Ryan's proof [9]. The proof is constructed for a classical logic system in natural deduction style with all logical connectives. The formalisation is constructive and uses the interactive theorem prover Agda which is an implementation of intensional Martin-L{\"{o}}f type theory [11]. Functions have to be defined in a structurally recursive way to pass the termination checker of Agda. The basic definitions of the formal system must be carefully chosen in order to provide a convenient environment to build correct proofs and meanwhile prevent from getting warnings from the type checker. The formalisation is written in an accessible way so that it can be used for educational purposes. The full source code is available online1. Keywords:},
author = {Cai, Leran and Kaposi, Ambrus and Altenkirch, Thorsten},
file = {:Users/jonaprieto/Mendeley/Cai, Kaposi, Altenkirch - 2015 - Formalising the Completeness Theorem of Classical Propositional Logic in Agda.pdf:pdf},
title = {{Formalising the Completeness Theorem of Classical Propositional Logic in Agda}},
url = {https://akaposi.github.io/proplogic.pdf},
year = {2015}
}
@misc{Coquand1992,
abstract = {Pattern Matching with Dependent Types Thierry Coquand Chalmers University Preliminary version, June 1992 Introduction This note deals with notation in type theory. The de nition of a function by pattern matching is by now common, and quite important in practice, in ...},
author = {Coquand, T.},
booktitle = {Informal proceedings of Logical Frameworks},
doi = {10.1.1.37.9541},
file = {:Users/jonaprieto/Mendeley/Coquand - 1992 - Pattern matching with dependent types.pdf:pdf},
number = {June},
pages = {1--14},
title = {{Pattern matching with dependent types}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.37.9541{\&}rep=rep1{\&}type=pdf{\#}page=69},
volume = {1992},
year = {1992}
}
@inproceedings{DeMoura2008,
abstract = {Satisfiability Modulo Theories (SMT) problem is a decision problem for logical first order formulas with respect to combinations of background theories such as: arithmetic, bit-vectors, arrays, and uninterpreted functions. Z3 is a new and efficient SMT Solver freely available from Microsoft Research. It is used in various software verification and analysis applications.},
author = {{De Moura}, Leonardo and Bj{\o}rner, Nikolaj},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-540-78800-3_24},
isbn = {3540787992},
issn = {03029743},
pages = {337--340},
title = {{Z3: An efficient SMT Solver}},
volume = {4963 LNCS},
year = {2008}
}
@misc{denivelle2003,
author = {{De Nivelle}, Hans},
title = {{Bliksem 1.10 User Manual}},
url = {http://www.ii.uni.wroc.pl/{~}nivelle/software/bliksem.}
}
@incollection{Een2004,
author = {E{\'{e}}n, Niklas and S{\"{o}}rensson, Niklas},
doi = {10.1007/978-3-540-24605-3_37},
file = {:Users/jonaprieto/Mendeley/E{\'{e}}n, S{\"{o}}rensson - 2004 - An Extensible SAT-solver.pdf:pdf},
pages = {502--518},
publisher = {Springer, Berlin, Heidelberg},
title = {{An Extensible SAT-solver}},
url = {http://link.springer.com/10.1007/978-3-540-24605-3{\_}37},
year = {2004}
}
@article{Ekici2017,
abstract = {This paper describes SMTCoq, a plug-in for the integration of external solvers into the Coq proof assistant. Based on a checker for generic first-order proof certificates fully implemented and proved correct in Coq, SMTCoq offers facilities to check answers from external SAT and SMT solvers and to increase Coq's automation using such solvers, all in a safeway. The current version supports proof certificates produced by the SAT solver ZChaff, for propositional logic, and the SMT solvers veriT and CVC4, for the quantifier-free fragment of the combined theory of fixed-size bit vectors, functional arrays with extensionality, linear integer arithmetic, and uninterpreted function symbols.},
author = {Ekici, B. and Mebsout, A. and Tinelli, C. and Keller, C. and Katz, G.},
file = {:Users/jonaprieto/Mendeley/Ekici et al. - 2017 - SMTCoq A plug-in for integrating SMT solvers into Coq.pdf:pdf;:Users/jonaprieto/Mendeley/Ekici et al. - 2017 - SMTCoq A plug-in for integrating SMT solvers into Coq(2).pdf:pdf},
journal = {stanford.edu},
title = {{SMTCoq: A plug-in for integrating SMT solvers into Coq}},
url = {http://web.stanford.edu/{~}guyk/pub/CAV2017{\_}C.pdf},
year = {2017}
}
@inproceedings{Farber2015,
abstract = {Metis is an automated theorem prover based on ordered paramodulation. It is widely employed in the interactive theorem provers Isabelle/HOL and HOL4 to automate proofs as well as reconstruct proofs found by automated provers. For both these purposes, the tableaux-based MESON tactic is frequently used in HOL Light. However, paramodulation-based provers such as Metis perform better on many problems involving equality. We created a Metis-based tactic in HOL Light which translates HOL problems to Metis, runs an OCaml version of Metis, and reconstructs proofs in Metis' paramodulation calculus as HOL proofs. We evaluate the performance of Metis as proof reconstruction method in HOL Light. 1},
author = {F{\"{a}}rber, Michael and Kaliszyk, Cezary},
booktitle = {GCAI 2015. Global Conference on Artificial Intelligence Metis-based},
file = {:Users/jonaprieto/Mendeley/F{\"{a}}rber, Kaliszyk - 2015 - Metis-based Paramodulation Tactic for HOL Light.pdf:pdf},
pages = {127--136},
title = {{Metis-based Paramodulation Tactic for HOL Light}},
volume = {36},
year = {2015}
}
@article{Farber2016,
abstract = {Copyright ? by the paper's authors.Proof assistants based on higher-order logic frequently use first-order automated theorem provers as proof search mechanisms. The reconstruction of the proofs generated by common tools, such as MESON and Metis, typically involves the use of the axiom of choice to simulate the Skolemisation steps. In this paper we present a method to reconstruct the proofs without introducing Skolem functions. This enables us to integrate tactics that use first-order automated theorem provers in logics that feature neither the axiom of choice nor the definite description operator.},
author = {F{\"{a}}rber, Michael and Kaliszyk, Cezary},
file = {:Users/jonaprieto/Mendeley/F{\"{a}}rber, Kaliszyk - 2016 - No choice Reconstruction of first-order ATP proofs without skolem functions.pdf:pdf},
issn = {16130073},
journal = {CEUR Workshop Proceedings},
number = {Paar},
pages = {24--31},
title = {{No choice: Reconstruction of first-order ATP proofs without skolem functions}},
volume = {1635},
year = {2016}
}
@techreport{Fleury2014,
abstract = {Sledgehammer is a powerful interface from Isabelle to automated provers, to discharge subgoals that appear during the interactive proofs. It chooses facts related to this goal and asks some automatic provers to find a proof. The proof can be either reconstructed or just used to extract the relevant lemmas: in both cases the proof is not trusted. We extend the support by adding one first-order prover (Zipperposition), the reconstruction for two higher-order ATPs (Leo-II and Satallax) and an SMT solver veriT. The support of higher-order prover should especially improve Sledgehammer's performance for higher-order goals. Acknowledgement I would like to thank Jasmin Blanchette for the internship about a very interesting subject, and the members of the logic and verification chair for the welcome. Then Simon Cruanes and Pascal Fontaine (developer of Zipperposition and veriT) were very helpful and provided many explanations concerning their provers and bug fixes.},
author = {Fleury, Mathias and Blanchette, Jasmin},
file = {:Users/jonaprieto/Mendeley/Fleury, Blanchette - 2014 - Translation of Proofs Provided by External Provers More Automatic Prover Support for Isabelle Two Higher-Ord.pdf:pdf},
institution = {Techniche Universit{\"{a}}t M{\"{u}}nchen},
keywords = {Isabelle,Leo-II,Satallax,Sledgehammer,TSTP proof,Zipperposition,higher-order proofs,proof reconstruc-tion,veriT},
pages = {2--0},
title = {{Translation of Proofs Provided by External Provers More Automatic Prover Support for Isabelle: Two Higher-Order Provers and a SMT Solver}},
url = {http://perso.eleves.ens-rennes.fr/{~}mfleur01/documents/Fleury{\_}internship2014.pdf},
year = {2014}
}
@article{Fontaine2006,
abstract = {Formal system development needs expressive specification languages, but also calls for highly automated tools. These two goals are not easy to reconcile, especially if one also aims at high assurances for correctness. In this paper, we describe a combination of {\{}Isabelle/HOL{\}} with a proof-producing {\{}SMT{\}} (Satisfiability Modulo Theories) solver that contains a {\{}SAT{\}} engine and a decision procedure for quantifier-free first-order logic with equality. As a result, a user benefits from the expressiveness of {\{}Isabelle/HOL{\}} when modeling a system, but obtains much better automation for those fragments of the proofs that fall within the scope of the (automatic) {\{}SMT{\}} solver. Soundness is not compromised because all proofs are submitted to the trusted kernel of Isabelle for certification. This architecture is straightforward to extend for other interactive proof assistants and proof-producing reasoners.},
author = {Fontaine, Pascal and Marion, Jean Yves and Merz, Stephan and Nieto, Leonor Prensa and Tiu, Alwen},
doi = {10.1007/11691372_11},
file = {:Users/jonaprieto/Mendeley/Fontaine et al. - 2006 - Expressiveness automation soundness Towards combining SMT solvers and interactive proof assistants.pdf:pdf},
isbn = {3540330569},
issn = {03029743},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
pages = {167--181},
title = {{Expressiveness + automation + soundness: Towards combining SMT solvers and interactive proof assistants}},
volume = {3920 LNCS},
year = {2006}
}
@incollection{foster2011integrating,
abstract = {Agda is a dependently typed functional programming language and a proof assistant in which developing programs and proving their correctness is one activity. We show how this process can be enhanced by integrating external automated theorem provers, provide a prototypical integration of the equational theorem prover Waldmeister, and give examples of how this proof automation works in practice.},
address = {Berlin, Heidelberg},
author = {Foster, Simon and Struth, Georg},
booktitle = {NASA Formal Methods: Third International Symposium, NFM 2011, Pasadena, CA, USA, April 18-20, 2011. Proceedings},
doi = {10.1007/978-3-642-20398-5_10},
file = {:Users/jonaprieto/Mendeley/Foster, Struth - 2011 - Integrating an Automated Theorem Prover into Agda.pdf:pdf},
isbn = {978-3-642-20398-5},
pages = {116--130},
publisher = {Springer Berlin Heidelberg},
title = {{Integrating an Automated Theorem Prover into Agda}},
year = {2011}
}
@article{Ge2008,
abstract = {Satisfiability Modulo Theories (SMT) solvers are large and complicated pieces of code. As a result, ensuring their correctness is challenging. In this paper, we discuss a technique for ensuring soundness by producing and checking proofs. We give details of our implementation using CVC3 and HOL Light and provide initial results from our effort to certify the SMT-LIB benchmarks.},
author = {Ge, Yeting and Barrett, Clark},
file = {:Users/jonaprieto/Mendeley/Ge, Barrett - 2008 - Proof Translation and SMT-LIB Benchmark Certification A Preliminary Report.pdf:pdf},
journal = {Proceedings of the 6{\^{}}{\{}th{\}} International Workshop on Satisfiability Modulo Theories (SMT '08)},
number = {0551645},
pages = {1--11},
title = {{Proof Translation and SMT-LIB Benchmark Certification: A Preliminary Report}},
url = {https://cs.nyu.edu/{~}yeting/prooftrans.pdf},
year = {2008}
}
@techreport{Gomez-Londono2015,
author = {G{\'{o}}mez-Londo{\~{n}}o, Alejandro},
file = {:Users/jonaprieto/Mendeley/G{\'{o}}mez-Londo{\~{n}}o - 2015 - Proof Reconstruction Parsing Proofs.pdf:pdf},
institution = {EAFIT University},
title = {{Proof Reconstruction: Parsing Proofs}},
url = {http://repository.eafit.edu.co/handle/10784/5484},
year = {2015}
}
@article{hillenbrand1997,
abstract = {Waldmeister is a high-performance theorem prover for unit equational first-order logic. In the making of Waldmeister, we have applied an engineering approach, identifying the critical points with respect to efficiency in time and space. Our logical three-level system model consists of the basic operations on the lowest level, where we put great stress on efficient data structures and algorithms. For the middle level, where the inference steps are aggregated into an inference machine, flexible adjustment has proven essential during experimental evaluation. The top level holds control strategy and reduction ordering. Although at this level only standard strategies are employed, really large proof tasks have been managed in reasonable time.},
author = {Hillenbrand, Thomas and Buch, Arnim and Vogt, Roland and L{\"{o}}chner, Bernd},
doi = {10.1023/A:1005872405899},
issn = {1573-0670},
journal = {Journal of Automated Reasoning},
number = {2},
pages = {265--270},
title = {{WALDMEISTER - High-Performance Equational Deduction}},
url = {https://doi.org/10.1023/A:1005872405899},
volume = {18},
year = {1997}
}
@book{humberstone2011,
author = {Humberstone, L.},
publisher = {MIT Press},
title = {{The Connectives}},
year = {2011}
}
@article{hurd2003first,
abstract = {In this paper we evaluate the effectiveness of first-order proof procedures when used as tactics for proving subgoals in a higher-order logic interactive theorem prover. We first motivate why such first-order proof tactics are useful, and then describe the core integrating technology: an `LCF-style' logical kernel for clausal first-order logic. This allows the choice of different logical mappings between higher-order logic and first-order logic to be used depending on the subgoal, and also enables several different first-order proof procedures to cooperate on constructing the proof. This work was carried out using the HOL4 theorem prover; we comment on the ease of transferring the technology to other higher-order logic theorem provers},
author = {Hurd, Joe},
file = {:Users/jonaprieto/Mendeley/Hurd - 2003 - First-order Proof Tactics In Higher-order Logic Theorem Provers.pdf:pdf},
journal = {Design and Application of Strategies/Tactics in Higher Order Logics, number NASA/CP-2003-212448 in NASA Technical Reports},
pages = {56--68},
title = {{First-order Proof Tactics In Higher-order Logic Theorem Provers}},
url = {http://www.gilith.com/research/papers},
year = {2003}
}
@misc{Hurd1999,
author = {Hurd, Joe},
doi = {10.1007/3-540-48256-3_21},
file = {:Users/jonaprieto/Mendeley/Hurd - 1999 - Integrating Gandalf and HOL.pdf:pdf},
pages = {311--321},
publisher = {Springer, Berlin, Heidelberg},
title = {{Integrating Gandalf and HOL}},
url = {http://link.springer.com/10.1007/3-540-48256-3{\_}21},
year = {1999}
}
@inproceedings{hurlin07practical,
address = {Bremen, Germany},
author = {Hurlin, Cl{\'{e}}ment and Chaieb, Amine and Fontaine, Pascal and Merz, Stephan and Weber, Tjark},
booktitle = {Proceedings of the Isabelle Workshop 2007},
editor = {Dixon, Lucas and Johansson, Moa},
file = {:Users/jonaprieto/Mendeley/Hurlin et al. - 2007 - Practical Proof Reconstruction for First-Order Logic and Set-Theoretical Constructions.pdf:pdf},
pages = {2--13},
title = {{Practical Proof Reconstruction for First-Order Logic and Set-Theoretical Constructions}},
year = {2007}
}
@incollection{kaliszyk2013,
abstract = {PRocH is a proof reconstruction tool that imports in HOL Light proofs produced by ATPs on the recently developed translation of HOL Light and Flyspeck problems to ATP formats. PRocH combines several reconstruction methods in parallel, but the core improvement over previous methods is obtained by re-playing in the HOL logic the detailed inference steps recorded in the ATP (TPTP) proofs, using several internal HOL Light inference methods. These methods range from fast variable matching and more involved rewriting, to full first-order theorem proving using the MESON tactic. The system is described and its performance is evaluated here on a large set of Flyspeck problems.},
address = {Berlin, Heidelberg},
author = {Kaliszyk, Cezary and Urban, Josef},
booktitle = {Automated Deduction -- CADE-24: 24th International Conference on Automated Deduction, Lake Placid, NY, USA, June 9-14, 2013. Proceedings},
doi = {10.1007/978-3-642-38574-2_18},
editor = {Bonacina, Maria Paola},
file = {:Users/jonaprieto/Mendeley/Kaliszyk, Urban - 2013 - PRocH Proof Reconstruction for HOL Light.pdf:pdf},
isbn = {978-3-642-38574-2},
pages = {267--274},
publisher = {Springer Berlin Heidelberg},
title = {{PRocH: Proof Reconstruction for HOL Light}},
url = {https://doi.org/10.1007/978-3-642-38574-2{\_}18},
year = {2013}
}
@misc{kanso:MResThesis:2013,
abstract = {This project studied whether a digital interlocking which had been pro- grammed with ladder logic (Boolean program) would obey generic safety properties. This was carried out by translating the ladder logic into an alternate representation and applying various techniques to allow specifica- tion of safety properties. Finally, a proof engine was used to formally verify if these properties were fulfilled and if they are not, then human readable documentation would be generated. III},
annote = {{\{}M{\}}aster of {\{}R{\}}esearch thesis, Dept.{\~{}}of Computer Science, Swansea University, Swansea SA2 8PP, UK.
Available from http://www.swan.ac.uk/{\$}{\~{}}{\$}csetzer/articlesFromOthers/index.html},
author = {Kanso, Karim},
file = {:Users/jonaprieto/Mendeley/Kanso - 2010 - Formal Verification of Ladder Logic.pdf:pdf},
institution = {Swansea University},
title = {{Formal Verification of Ladder Logic}},
url = {http://www.cs.swan.ac.uk/{~}csetzer/articlesFromOthers/kanso/karimKansoMResThesisFormalVerificationOfLadderLogic.pdf},
year = {2010}
}
@article{Kanso2012,
author = {Kanso, Karim},
file = {:Users/jonaprieto/Mendeley/Kanso - 2012 - Agda as a Platform for the Development of Verified Railway Interlocking Systems.pdf:pdf},
title = {{Agda as a Platform for the Development of Verified Railway Interlocking Systems}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.310.1502},
year = {2012}
}
@article{kanso2016light,
author = {Kanso, Karim and Setzer, Anton},
doi = {10.1017/S0960129514000140},
file = {:Users/jonaprieto/Mendeley/Kanso, Setzer - 2016 - A Light-weight Integration Of Automated And Interactive Theorem Proving.pdf:pdf},
issn = {09601295},
journal = {Mathematical Structures in Computer Science},
number = {1},
pages = {129--153},
publisher = {Cambridge University Press},
title = {{A Light-weight Integration Of Automated And Interactive Theorem Proving}},
url = {http://cs.swansea.ac.uk/{~}cskarim/agda/},
volume = {26},
year = {2016}
}
@phdthesis{Keller2013,
author = {Keller, Chantal},
file = {:Users/jonaprieto/Mendeley/Keller - 2013 - A Matter of Trust Skeptical Communication Between Coq and External Provers.pdf:pdf},
title = {{A Matter of Trust: Skeptical Communication Between Coq and External Provers}},
url = {https://hal.archives-ouvertes.fr/pastel-00838322/},
year = {2013}
}
@phdthesis{Klieber2014,
author = {Klieber, William},
file = {:Users/jonaprieto/Mendeley/Klieber - 2014 - Formal Verification Using Quantified Boolean Formulas (QBF).pdf:pdf},
keywords = {QBF Solvers},
mendeley-tags = {QBF Solvers},
school = {Carnegie Mellon University},
title = {{Formal Verification Using Quantified Boolean Formulas (QBF)}},
url = {http://www.cs.cmu.edu/{~}wklieber/thesis.pdf},
year = {2014}
}
@inproceedings{Lonsing2017,
abstract = {We present the latest major release version 6.0 of the quanti-fied Boolean formula (QBF) solver DepQBF, which is based on QCDCL. QCDCL is an extension of the conflict-driven clause learning (CDCL) paradigm implemented in state of the art propositional satisfiability (SAT) solvers. The Q-resolution calculus (QRES) is a QBF proof system which underlies QCDCL. QCDCL solvers can produce QRES proofs of QBFs in prenex conjunctive normal form (PCNF) as a byproduct of the solving process. In contrast to traditional QCDCL based on QRES, DepQBF 6.0 implements a variant of QCDCL which is based on a generalization of QRES. This generalization is due to a set of additional axioms and leaves the original Q-resolution rules unchanged. The generalization of QRES enables QCDCL to potentially produce exponentially shorter proofs than the traditional variant. We present an overview of the features imple-mented in DepQBF and report on experimental results which demonstrate the effectiveness of generalized QRES in QCDCL.},
address = {Gotenburg},
author = {Lonsing, Florian and Egly, Uwe},
booktitle = {International Conference on Automated Deduction},
file = {:Users/jonaprieto/Mendeley/Lonsing, Egly - 2017 - DepQBF 6.0 A Search-Based QBF Solver Beyond Traditional QCDCL.pdf:pdf},
publisher = {Springer},
title = {{DepQBF 6.0: A Search-Based QBF Solver Beyond Traditional QCDCL}},
url = {https://arxiv.org/pdf/1702.08256.pdf},
year = {2017}
}
@article{meng2006automation,
author = {Meng, Jia and Quigley, Claire and Paulson, Lawrence C.},
journal = {Information and computation},
number = {10},
pages = {1575--1596},
publisher = {Elsevier},
title = {{Automation for Interactive Proof: First Prototype}},
volume = {204},
year = {2006}
}
@inproceedings{Moskewicz2001,
abstract = {Boolean Satisfiability is probably the most studied of combinatorial optimization/search problems. Significant effort has been devoted to trying to provide practical solutions to this problem for problem instances encountered in a range of applications in Electronic Design Automation (EDA), as well as in Artificial Intelligence (AI). This study has culminated in the development of several SAT packages, both proprietary and in the public domain (e.g. GRASP, SATO) which find significant use in both research and industry. Most existing complete solvers are variants of the Davis-Putnam (DP) search algorithm. In this paper we describe the development of a new complete solver, Chaff, which achieves significant performance gains through careful engineering of all aspects of the search - especially a particularly efficient implementation of Boolean constraint propagation (BCP) and a novel low overhead decision strategy. Chaff has been able to obtain one to two orders of magnitude performance improvement on difficult SAT benchmarks in comparison with other solvers (DP or otherwise), including GRASP and SATO.},
author = {Moskewicz, Matthew W and Madigan, Conor F. and Zhao, Ying and Zhang, Lintao and Malik, Sharad},
booktitle = {Proceedings of the 38th Design Automation Conference (DAC 2001)},
doi = {http://doi.acm.org/10.1145/378239.379017},
file = {:Users/jonaprieto/Mendeley/Moskewicz et al. - 2001 - Chaff engineering an efficient SAT solver.pdf:pdf},
isbn = {1-58113-297-2},
issn = {0738-100X},
keywords = {Branching Heuristics,CDCL,Chaff,Lazy Data-Structure,SAT,Solver,VSIDS,Watched literals},
pages = {530--535},
title = {{Chaff: engineering an efficient SAT solver}},
year = {2001}
}
@book{nipkow2002isabelle,
author = {Nipkow, Tobias and Paulson, Lawrence C. and Wenzel, Markus},
publisher = {Springer Science {\&} Business Media},
title = {{Isabelle/HOL: A Proof Assistant for Higher-order Logic}},
volume = {2283},
year = {2002}
}
@misc{norrish2007hol,
author = {Norrish, Michael and Slind, Konrad},
title = {{The HOL system description}},
year = {2007}
}
@incollection{Otten2008,
address = {Berlin, Heidelberg},
author = {Otten, Jens},
booktitle = {Automated Reasoning},
doi = {10.1007/978-3-540-71070-7_23},
file = {:Users/jonaprieto/Mendeley/Otten - 2008 - leanCoP 2.0 and ileanCoP 1.2 High Performance Lean Theorem Proving in Classical and Intuitionistic Logic (System Descript.pdf:pdf},
pages = {283--291},
publisher = {Springer Berlin Heidelberg},
title = {{leanCoP 2.0 and ileanCoP 1.2: High Performance Lean Theorem Proving in Classical and Intuitionistic Logic (System Descriptions)}},
url = {http://link.springer.com/10.1007/978-3-540-71070-7{\_}23},
year = {2008}
}
@book{paulson1994isabelle,
author = {Paulson, Lawrence C.},
publisher = {Springer Science {\&} Business Media},
title = {{Isabelle: A Generic Theorem Prover}},
volume = {828},
year = {1994}
}
@inproceedings{paulson2010three,
author = {Paulson, Lawrence C. and Blanchette, Jasmin},
booktitle = {PAAR@ IJCAR},
file = {:Users/jonaprieto/Mendeley/Paulson, Blanchette - 2010 - Three Years Of Experience with Sledgehammer, A Practical Link Between Automatic And Interactive Theorem Pro.pdf:pdf},
pages = {1--10},
title = {{Three Years Of Experience with Sledgehammer, A Practical Link Between Automatic And Interactive Theorem Provers.}},
year = {2010}
}
@inproceedings{paulson2007source,
author = {Paulson, Lawrence C. and Susanto, Kong Woei},
booktitle = {TPHOLs},
file = {:Users/jonaprieto/Mendeley/Paulson, Susanto - 2007 - Source-level Proof Reconstruction For Interactive Theorem Proving.pdf:pdf},
organization = {Springer},
pages = {232--245},
title = {{Source-level Proof Reconstruction For Interactive Theorem Proving}},
volume = {4732},
year = {2007}
}
@misc{AgdaMetis,
author = {Prieto-Cubides, Jonathan},
doi = {10.5281/zenodo.398862},
title = {{Metis Prover Reasoning for Propositional Logic in Agda}},
url = {https://doi.org/10.5281/zenodo.398862},
year = {2017}
}
@misc{AgdaProp,
author = {Prieto-Cubides, Jonathan},
doi = {10.5281/zenodo.398852},
title = {{A Library for Classical Propositional Logic in Agda}},
url = {https://doi.org/10.5281/zenodo.398852},
year = {2017}
}
@misc{Prieto-Cubides2017,
abstract = {Collection of TPTP problems of propositional logic.},
author = {Prieto-Cubides, Jonathan},
doi = {10.5281/ZENODO.817997},
file = {:Users/jonaprieto/Mendeley/Prieto-Cubides - 2017 - Prop-Pack collection of propositional logic problem in TPTP format.pdf:pdf;:Users/jonaprieto/Mendeley/Prieto-Cubides - 2017 - Prop-Pack collection of propositional logic problem in TPTP format(2).pdf:pdf},
month = {jun},
title = {{Prop-Pack : collection of propositional logic problem in TPTP format}},
url = {https://zenodo.org/record/817997{\#}.WYdjIbb5iAw},
year = {2017}
}
@misc{Athena,
author = {Prieto-Cubides, Jonathan},
doi = {10.5281/zenodo.437196},
file = {:Users/jonaprieto/Mendeley/Prieto-Cubides - 2017 - A Translator Tool for Metis Proofs in Haskell.pdf:pdf},
title = {{A Translator Tool for Metis Proofs in Haskell}},
url = {https://doi.org/10.5281/zenodo.437196},
year = {2017}
}
@incollection{Riazanov1999,
abstract = {Vampire is a resolution-based theorem prover for rst-order classical logic. The current version implements ordered binary resolution with the set-of-support strategy and ordered hyperresolution. The competition version will have equality rules.},
address = {Berlin, Heidelberg},
author = {Riazanov, Alexandre and Voronkov, Andrei},
booktitle = {Automated Deduction --- CADE-16: 16th International Conference on Automated Deduction Trento, Italy, July 7--10, 1999 Proceedings},
doi = {10.1007/3-540-48660-7_26},
isbn = {978-3-540-48660-2},
pages = {292--296},
publisher = {Springer Berlin Heidelberg},
title = {{Vampire}},
url = {https://doi.org/10.1007/3-540-48660-7{\_}26},
year = {1999}
}
@misc{Schmitt2001,
author = {Schmitt, Stephan and Lorigo, Lori and Kreitz, Christoph and Nogin, Aleksey},
doi = {10.1007/3-540-45744-5_34},
file = {:Users/jonaprieto/Mendeley/Schmitt et al. - 2001 - JProver Integrating Connection-Based Theorem Proving into Interactive Proof Assistants.pdf:pdf;:Users/jonaprieto/Mendeley/Schmitt et al. - 2001 - JProver Integrating Connection-Based Theorem Proving into Interactive Proof Assistants(2).pdf:pdf},
pages = {421--426},
publisher = {Springer, Berlin, Heidelberg},
title = {{JProver: Integrating Connection-Based Theorem Proving into Interactive Proof Assistants}},
url = {http://link.springer.com/10.1007/3-540-45744-5{\_}34},
year = {2001}
}
@article{Schulz:AICOM-2002,
annote = {StS},
author = {Schulz, Stephan},
journal = {Journal of AI Communications},
number = {2/3},
pages = {111--126},
title = {{E -- A Brainiac Theorem Prover}},
volume = {15},
year = {2002}
}
@phdthesis{Sicard2015,
abstract = {We propose a new approach to computer-assisted verification of lazy functional programs where functions can be defined by general recursion. We work in first-order theories of functional programs which are obtained by translating Dybjer's programming logic (Dybjer, P. [1985]. Program Veri- fication in a Logical Theory of Constructions. In: Functional Programming Languages and Computer Architecture. Ed. by Jouannaud, J.-P. Vol. 201. Lecture Notes in Computer Science. Springer, pp. 334–349) into a first-order theory, and by extending this programming logic with new (co-)inductive predicates. Rather than building a special purpose system, we formalise our theories in Agda, a proof assistant for dependent type theory which can be used as a generic theorem prover. Agda provides support for interact- ive reasoning by representing first-order theories using the propositions-as- types principle. Further support is provided by off-the-shelf automatic the- orem provers for first-order-logic called by a Haskell program that translates our Agda representations of first-order formulae into the TPTP language understood by the provers. We show some examples where we combine interactive and automatic reasoning, covering both proofs by induction and co- induction. The examples include functions defined by structural recursion, simple general recursion, nested recursion, higher-order recursion, guarded and unguarded co-recursion. Keywords:},
author = {Sicard-Ram{\'{i}}rez, Andr{\'{e}}s and Bove, Ana and Dybjer, Peter},
file = {:Users/jonaprieto/Mendeley/Sicard-Ram{\'{i}}rez, Bove, Dybjer - 2015 - Reasoning about Functional Programs by Combining Interactive and Automatic Proofs.pdf:pdf},
keywords = {automatic proofs,correctness,first-order theories,functional program,general recursion,interactive proofs,lazy evaluation,total lan- guages,type theory},
school = {Universidad de la Rep{\{}{\'{u}}{\}}blica},
title = {{Reasoning about Functional Programs by Combining Interactive and Automatic Proofs}},
url = {https://www.colibri.udelar.edu.uy/handle/123456789/4715},
year = {2015}
}
@incollection{Sicard-Ramirez2016,
address = {Medell{\'{i}}n, Colombia},
author = {Sicard-Ram{\'{i}}rez, Andr{\'{e}}s and Ospina-Giraldo, Juan-Fernando},
file = {:Users/jonaprieto/Mendeley/Sicard-Ram{\'{i}}rez, Ospina-Giraldo - 2016 - First-Order Proof Reconstruction (Research Proposal).pdf:pdf},
publisher = {Universidad EAFIT},
title = {{First-Order Proof Reconstruction (Research Proposal)}},
year = {2016}
}
@inproceedings{Stump2008,
address = {New York, New York, USA},
author = {Stump, Aaron and Oe, Duckki},
booktitle = {Proceedings of the Joint Workshops of the 6th International Workshop on Satisfiability Modulo Theories and 1st International Workshop on Bit-Precise Reasoning - SMT '08/BPR '08},
doi = {10.1145/1512464.1512470},
file = {:Users/jonaprieto/Mendeley/Stump, Oe - 2008 - Towards an SMT proof format.pdf:pdf;:Users/jonaprieto/Mendeley/Stump, Oe - 2008 - Towards an SMT proof format(2).pdf:pdf},
isbn = {9781605584409},
keywords = {logical framework,proof formats},
pages = {27},
publisher = {ACM Press},
title = {{Towards an SMT proof format}},
url = {http://portal.acm.org/citation.cfm?doid=1512464.1512470},
year = {2008}
}
@article{Stump2013,
abstract = {Producing and checking proofs from {\{}SMT{\}} solvers is currently the most feasible method for achieving high confidence in the correctness of solver results. The diversity of solvers and relative complexity of {\{}SMT{\}} over, say, {\{}SAT{\}} means that flexibility, as well as performance, is a critical characteristic of a proof-checking solution for {\{}SMT{\}}. This paper describes such a solution, based on a Logical Framework with Side Conditions ({\{}LFSC{\}}). We describe the framework and show how it can be applied for flexible proof production and checking for two different {\{}SMT{\}} solvers, clsat and cvc3. We also report empirical results showing good performance relative to solver execution time.},
author = {Stump, Aaron and Oe, Duckki and Reynolds, Andrew and Hadarean, Liana and Tinelli, Cesare},
doi = {10.1007/s10703-012-0163-3},
file = {:Users/jonaprieto/Mendeley/Stump et al. - 2013 - SMT proof checking using a logical framework.pdf:pdf},
issn = {09259856},
journal = {Formal Methods in System Design},
keywords = {Edinburgh logical framework,LFSC,Proof checking,Satisfiability modulo theories},
number = {1},
pages = {91--118},
title = {{SMT proof checking using a logical framework}},
volume = {42},
year = {2013}
}
@incollection{sultana2015,
abstract = {Implementing proof reconstruction is difficult because it involves symbolic manipulations of formal objects whose representation varies between different systems. It requires significant knowledge of the source and target systems. One cannot simply re-target to another logic. We present a modular proof reconstruction system with separate components, specifying their behaviour and describing how they interact. This system is demonstrated and evaluated through an implementation to reconstruct proofs generated by Leo-II and Satallax in Isabelle HOL, and is shown to work better than the current method of rediscovering proofs using a select set of provers.},
address = {Cham},
author = {Sultana, Nik and Benzm{\"{u}}ller, Christoph and Paulson, Lawrence C.},
booktitle = {Frontiers of Combining Systems: 10th International Symposium, FroCoS 2015, Wroclaw, Poland, September 21-24, 2015, Proceedings},
doi = {10.1007/978-3-319-24246-0_16},
editor = {Lutz, Carsten and Ranise, Silvio},
file = {:Users/jonaprieto/Mendeley/Sultana, Benzm{\"{u}}ller, Paulson - 2015 - Proofs and Reconstructions.pdf:pdf},
isbn = {978-3-319-24246-0},
pages = {256--271},
publisher = {Springer International Publishing},
title = {{Proofs and Reconstructions}},
url = {https://doi.org/10.1007/978-3-319-24246-0{\_}16},
year = {2015}
}
@article{Sutcliffe1996,
author = {Sutcliffe, Geoff},
file = {:Users/jonaprieto/Mendeley/Sutcliffe - 1996 - The Practice of Clausification in Automatic Theorem Proving.pdf:pdf},
keywords = {automatic theorem proving,clauses,computing review categories,resolution},
number = {18},
pages = {57--68},
title = {{The Practice of Clausification in Automatic Theorem Proving}},
year = {1996}
}
@article{sutcliffe2009,
abstract = {This paper describes the First-Order Form (FOF) and Clause Normal Form (CNF) parts of the TPTP problem library, and the associated infrastructure. TPTP v3.5.0 was the last release containing only FOF and CNF problems, and thus serves as the exemplar. This paper summarizes the history and development of the TPTP, describes the structure and contents of the TPTP, and gives an overview of TPTP related projects and tools.},
author = {Sutcliffe, Geoff},
doi = {10.1007/s10817-009-9143-8},
issn = {1573-0670},
journal = {Journal of Automated Reasoning},
month = {jul},
number = {4},
pages = {337},
title = {{The TPTP Problem Library and Associated Infrastructure}},
url = {https://doi.org/10.1007/s10817-009-9143-8},
volume = {43},
year = {2009}
}
@inproceedings{Sut07-CSR,
author = {Sutcliffe, Geoff},
booktitle = {Proceedings of the 2nd International Computer Science Symposium in Russia},
editor = {Diekert, V and Volkov, M and Voronkov, A},
number = {4649},
pages = {7--23},
publisher = {Springer-Verlag},
series = {Lecture Notes in Computer Science},
title = {{TPTP, TSTP, CASC, etc.}},
year = {2007}
}
@inproceedings{Sutcliffe-Schulz-Claessen-VanGelder-2006,
author = {Sutcliffe, Geoff and Schulz, Stephan and Claessen, Koen and {Van Gelder}, Allen},
booktitle = {International Joint Conference on Automated Reasoning (IJCAR 2006)},
editor = {Furbach, Ulrich and Shankar, Natarajan},
pages = {67--81},
publisher = {Springer},
title = {{Using the TPTP Language for Writing Derivations and Finite Interpretations}},
volume = {4130},
year = {2006}
}
@article{sutcliffe2004tstp,
author = {Sutcliffe, Geoff and Zimmer, J{\"{u}}rgen and Schulz, Stephan},
journal = {Distributed Constraint Problem Solving and Reasoning in Multi-Agent Systems},
pages = {201--215},
title = {{TSTP data-exchange formats for automated theorem proving tools}},
volume = {112},
year = {2004}
}
@incollection{Tammet1996,
author = {Tammet, Tanel},
doi = {10.1007/3-540-61511-3_65},
file = {:Users/jonaprieto/Mendeley/Tammet - 1996 - A Resolution Theorem Prover for Intuitionistic Logic.pdf:pdf},
pages = {2--16},
publisher = {Springer, Berlin, Heidelberg},
title = {{A Resolution Theorem Prover for Intuitionistic Logic}},
url = {http://link.springer.com/10.1007/3-540-61511-3{\_}65},
year = {1996}
}
@article{Tammet1997,
abstract = {We give a brief overview of the first-order classical logic component in the Gandalf family of resolution-based automated theorem provers for classical and intuitionistic logics. The main strength of the described version is a sophisticated algorithm for nonunit subsumption. {\textcopyright} 1997 Kluwer Academic Publishers.},
author = {Tammet, Tanel},
file = {:Users/jonaprieto/Mendeley/Tammet - 1996 - A Resolution Theorem Prover for Intuitionistic Logic.pdf:pdf},
issn = {01687433},
journal = {Journal of Automated Reasoning},
keywords = {Automated theorem proving,Competition,Gandalf,Resolution,Subsumption},
number = {2},
pages = {199--204},
title = {{Gandalf}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-0031108576{\&}partnerID=tZOtx3y1},
volume = {18},
year = {1997}
}
@misc{agdateam,
author = {Team, The Agda Developement},
edition = {Version 8.},
title = {{Agda 2.4.2.3}},
url = {http://wiki.portal.chalmers.se/agda/pmwiki.php},
year = {2015}
}
@misc{coqteam,
author = {Team, The Coq Developement},
edition = {Version 8.},
title = {{The Coq Proof Assistant. Reference Manual}},
url = {https://coq.inria.fr/distrib/current/files/Reference-Manual.pdf},
year = {2015}
}
@book{VanDalen1994,
address = {Berlin, Heidelberg},
annote = {The process of formalization of propositional logic consists of two stages:
(1) present a formal language, (2) specify a procedure for obtaining valid or
true propositions.},
author = {van Dalen, Dirk},
doi = {10.1007/978-3-662-02962-6},
file = {:Users/jonaprieto/Mendeley/van Dalen - 1994 - Logic and Structure.pdf:pdf},
isbn = {978-3-540-57839-0},
publisher = {Springer Berlin Heidelberg},
series = {Universitext},
title = {{Logic and Structure}},
url = {http://link.springer.com/10.1007/978-3-662-02962-6},
year = {1994}
}
@inproceedings{Weber2006,
abstract = {This paper describes the integration of a leading SAT solver with Isabelle/HOL, a popular interactive theorem prover. The SAT solver generates resolution-style proofs for (instances of) propositional tautologies. These proofs are verified by the theorem prover. The presented approach significantly improves Isabelle's performance on propositional problems, and furthermore exhibits counterexamples for unprovable conjectures. ?? 2005 Elsevier B.V. All rights reserved.},
author = {Weber, Tjark},
booktitle = {Electronic Notes in Theoretical Computer Science},
doi = {10.1016/j.entcs.2005.12.007},
file = {:Users/jonaprieto/Mendeley/Weber - 2006 - Integrating a SAT solver with an LCF-style theorem prover.pdf:pdf},
issn = {15710661},
keywords = {LCF-style theorem prover,Proof checking,Propositional resolution,SAT solver},
number = {2 SPEC. ISS.},
pages = {67--78},
title = {{Integrating a SAT solver with an LCF-style theorem prover}},
volume = {144},
year = {2006}
}
@article{Weber2009,
abstract = {This paper describes the integration of zChaff and MiniSat, currently two leading SAT solvers, with Higher Order Logic (HOL) theorem provers. Both SAT solvers generate resolution-style proofs for (instances of) propositional tautologies. These proofs are verified by the theorem provers. The presented approach significantly improves the provers' performance on propositional problems, and exhibits counterexamples for unprovable conjectures. It is also shown that LCF-style theorem provers can serve as viable proof checkers even for large SAT problems. An efficient representation of the propositional problem in the theorem prover turns out to be crucial; several possible solutions are discussed. ?? 2007 Elsevier Inc. All rights reserved.},
author = {Weber, Tjark and Amjad, Hasan},
doi = {10.1016/j.jal.2007.07.003},
file = {:Users/jonaprieto/Mendeley/Weber, Amjad - 2009 - Efficiently checking propositional refutations in HOL theorem provers.pdf:pdf},
issn = {15708683},
journal = {Journal of Applied Logic},
keywords = {Interactive theorem proving,LCF-style proof checking,Propositional resolution},
number = {1},
pages = {26--40},
title = {{Efficiently checking propositional refutations in HOL theorem provers}},
volume = {7},
year = {2009}
}
@inproceedings{Weidenbach2009,
abstract = {SPASS is an automated theorem prover for full first-order logic with equality and a number of non-classical logics. This system description provides an overview of our recent developments in SPASS 3.5 including subterm contextual rewriting, improved split backtracking, a significantly faster FLOTTER implementation with additional control flags, completely symmetric implementation of forward and backward redundancy criteria, faster parsing with improved support for big files, faster and extended sort module, and support for include commands in input files. Finally, SPASS 3.5 can now parse files in TPTP syntax, comes with a new converter tptp2dfg and is distributed under a BSD style license.},
author = {Weidenbach, Christoph and Dimova, Dilyana and Fietzke, Arnaud and Kumar, Rohit and Suda, Martin and Wischnewski, Patrick},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-02959-2_10},
isbn = {3642029582},
issn = {03029743},
pages = {140--145},
title = {{SPASS version 3.5}},
volume = {5663 LNAI},
year = {2009}
}
